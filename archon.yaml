# archon.yaml

# Define version as a variable for easier management
variables:
  KEYCLOAK_VERSION: "999.0.0-SNAPSHOT"

# Project Metadata
project:
  name: "Keycloak Example"
  version: "${KEYCLOAK_VERSION}"  # Using version variable
  description: "The purpose of this project is to provide an example of how to deploy Keycloak using Archon Cloud."
  maintainers:
    - name: "Ryan Manthy"
      email: "ryan@archon.inc"
  license: "Copyright 2025 Archon Technologies Inc. All rights reserved."

# Paths Configuration
paths:
  source: "src/"                    # General source directory
  tests: "tests/"                   # Test suite directory
  output: "*/target/"               # Build artifacts output directory
  vendor: "*/vendor"                # Vendor or dependency cache directory

# Dependency Management (global or per-service can be defined separately if needed)
dependencies:
  type: "maven"
  file: "pom.xml"
  # Updated dependency installation commands based on provided build steps
  install_commands:
    - "./mvnw -f quarkus/dist/pom.xml clean install"
    - "cd quarkus"
    - "./mvnw -f ./pom.xml clean install -DskipTestsuite -DskipExamples -DskipTests"
    - "./mvnw clean install -DskipTests"
    - "cd ."

# Environment Settings
environment:
  variables:
    KC_DB: "postgres"
    KC_DB_URL: "jdbc:postgresql://localhost:5432/keycloak"
    KC_DB_USERNAME: "keycloak"
    KC_DB_PASSWORD: "password"
    KC_HOSTNAME: "localhost"
    KC_HTTP_PORT: "8080"
    KC_HTTPS_PORT: "8443"
    KC_PROXY: "edge"
    KC_LOG_LEVEL: "info"
    # Added home directory for keeping state between startups
    KC_HOME_DIR: ".kc"
    # Configure logging before any Java classes are loaded
    _JAVA_OPTIONS: "-Djava.util.logging.manager=org.jboss.logmanager.LogManager"
    MAVEN_OPTS: "-Djava.util.logging.manager=org.jboss.logmanager.LogManager"
    JAVA_OPTS: "-Djava.util.logging.manager=org.jboss.logmanager.LogManager -Djava.util.concurrent.ForkJoinPool.common.threadFactory=io.quarkus.bootstrap.forkjoin.QuarkusForkJoinWorkerThreadFactory"
  profiles:
    development:
      variables:
        KC_LOG_LEVEL: "debug"
        KC_HEALTH_ENABLED: "true"
        KC_METRICS_ENABLED: "true"
        KC_FEATURES: "preview"
        # Development-specific settings
        KC_DB: "dev-file"  # Use file-based DB for development
        KC_HTTP_ENABLED: "true"  # Enable HTTP for development
    production:
      variables:
        KC_LOG_LEVEL: "warn"
        KC_CACHE: "ispn"
        KC_CACHE_STACK: "kubernetes"
        KC_HEALTH_ENABLED: "true"
        KC_METRICS_ENABLED: "true"
        KC_HTTP_ENABLED: "false"  # Disable HTTP in production
        KC_HTTPS_REQUIRED: "all"  # Require HTTPS in production
    testing:
      variables:
        KC_LOG_LEVEL: "debug"
        KC_HEALTH_ENABLED: "true"
        KC_METRICS_ENABLED: "true"
        KC_FEATURES: "preview"
        KC_HTTP_ENABLED: "true"  # Enable HTTP for testing
        # Additional test-specific variables
        KEYCLOAK_TEST_TIMEOUT: "300"

# Build Instructions (updated based on provided commands)
build:
  pre_build:
    - "echo 'Starting build process.'"
    - "mkdir -p .kc"  # Ensure home directory exists
  build:
    # Updated build commands based on provided steps
    - "./mvnw -f quarkus/dist/pom.xml clean install"
    - "cd quarkus"
    - "./mvnw -f ./pom.xml clean install -DskipTestsuite -DskipExamples -DskipTests"
    - "./mvnw clean install -DskipTests"
    - "cd ."
  run:
    # Command to run Keycloak in development mode
    - "java -jar quarkus/server/target/lib/quarkus-run.jar start-dev"
  dev_mode:
    # Command to run Keycloak in Quarkus development mode with debugging
    - "./mvnw -f quarkus/server/pom.xml compile quarkus:dev -Dquarkus.args='start-dev'"
    # Alternative with debugging suspended
    # - "./mvnw -f quarkus/server/pom.xml -Dsuspend=true compile quarkus:dev -Dquarkus.args='start-dev'"
  test:
    # Run CLI tests
    - "./mvnw -f quarkus/tests/pom.xml test"
    # Run distribution tests
    - "./mvnw -f quarkus/tests/pom.xml test -Dkc.quarkus.tests.dist=docker"
    # Run database tests (example for PostgreSQL)
    # - "./mvnw -f quarkus/tests/pom.xml clean install -Dkc.test.storage.database=true -Dtest=PostgreSQLDistTest"
  post_build:
    - "echo 'Build process completed.'"

# Monorepo Docker Environments
# Define multiple Docker environments for different services in the monorepo.
docker_environments:
  keycloak-quarkus:
    context: "quarkus/container"    # Build context from container directory
    dockerfile: "Dockerfile"        # Location of Keycloak Quarkus Dockerfile
    image_tag: "keycloak-demo:${KEYCLOAK_VERSION}"  # Using version variable
    build_args:
      KEYCLOAK_DIST: "keycloak-${KEYCLOAK_VERSION}.tar.gz"  # Using version variable
    # Instructions for building the container image based on provided commands
    build_instructions:
      # First build the distribution
      - "./mvnw -f quarkus/dist/pom.xml clean install"
      - "cd quarkus"
      - "./mvnw -f ./pom.xml clean install -DskipTestsuite -DskipExamples -DskipTests"
      - "./mvnw clean install -DskipTests"
      - "cd ."
      # Copy the distribution tar.gz to the container directory
      - "cp quarkus/dist/target/keycloak-${KEYCLOAK_VERSION}.tar.gz quarkus/container/"
      # Build the Docker image
      - "cd quarkus/container && docker build --build-arg KEYCLOAK_DIST=keycloak-${KEYCLOAK_VERSION}.tar.gz -t keycloak-demo ."
    # Added container run commands
    run_commands:
      # Development mode with HTTP enabled
      development: "docker run -p 8080:8080 -p 8443:8443 -e KC_DB=dev-file -e KC_HTTP_ENABLED=true -e KC_HEALTH_ENABLED=true -e KC_METRICS_ENABLED=true -e KC_FEATURES=preview keycloak-demo start-dev"
      # Production mode with proper settings
      production: "docker run -p 8443:8443 -e KC_DB=postgres -e KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak -e KC_DB_USERNAME=keycloak -e KC_DB_PASSWORD=password -e KC_HOSTNAME=localhost -e KC_HTTPS_REQUIRED=all keycloak-demo start"